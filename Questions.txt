1) Given

class X {
  int a = 99;
  static void showA(X x) {
    sop("value of a is " + x.a);
  }
}
and
X myX = new X();
X.showA(myX);

what is the result?
A) Compilation fails
B) Exception at runtime
C) value of a is 0
D) value of a is 99

2) Given

class X {
  static int x = 99;
}

and:

X myX = new X();
X yourX = new X();
myX.x = 0; // line n1
sop(yourX.x);

What is the result?
A) Compilation fails at line n1
B) Exception at runtime at line n1
C) 99
D) 0

3) given

  class Y {
    static String sayHi() { return "Y-Hello"; }
    String sayHi2() { return "Y-Hello2"; }
  }

  class Z extends Y {
    static String sayHi() { return "Z-Hello"; }
    String sayHi2() { return "Z-Hello2"; }
  }

and:
    Y y = new Z();
    System.out.println(y.sayHi() + ", " +y.sayHi2());

What is the result?
    A) Y-Hello, Y-Hello2
    B) Y-Hello, Z-Hello2
    C) Z-Hello, Z-Hello2
    D) Z-Hello, Y-Hello2
    E) Compilation fails



and:
    Y y = new Z();
    System.out.println(y.sayHi() + ", " +y.sayHi2());

    What is the result?
    A) Y-Hello, Y-Hello2
    B) Y-Hello, Z-Hello2
    C) Z-Hello, Z-Hello2
    D) Z-Hello, Y-Hello2
    E) Compilation fails

4) Given
public class X {
  protected void doStuff() {}
}
and:
public class A extends X {
  void doStuff() {}
}
and:
public class B extends X {
  public void doStuff() {}
}
and:
public class C extends X {
  private void doStuff() {}
}
which compile?

5) Given
public class X {
  public void doStuff() {}
}
and:
public class A extends X {
  void doStuff() {}
}
and:
public class B extends X {
  protected void doStuff() {}
}
and:
public class C extends X {
  private void doStuff() {}
}
which compile?

6) Given:

try {
 // .. stuff that might break
} catch (IOException ioe) {
 // handle it...
} catch (... e) {
 //
}

Which may be added at ...?
A) Throwable
B) Exception
C) RuntimeException
D) FileNotFoundException

7) Given
public class X {
  public void doStuff() throws IOException {}
}
and:
public class A extends X {
  public void doStuff() throws FileNotFoundException {}
}
and:
public class B extends X {
  public void doStuff() throws RuntimeException {}
}
and:
public class C extends X {
  public void doStuff() {}
}
which compile?

8) Given
public class X {
  public CharSequence doStuff() { ... }
}
and:
public class A extends X {
  public String doStuff() { ... }
}
and:
public class B extends X {
  public StringBuilder doStuff() { ... }
}
and:
public class C extends X {
  public LocalDate doStuff() { ... }
}
and:
public class D extends X {
  public Object doStuff() { ... }
}
which compile?

9) Given P1, P2, and C1

and

P2 p2 = new P2();
C c = (C)p2;

What is the result?
A) Compiles and runs
B) Fails at runtime
C) Compilation fails

9) Given P, PC, and C

and

P p = if... "new C();" // could never succeed, not allowed...
C c = (C)p; // therefore this couldn't possibly work! Compiler rejects it.

What is the result?
A) Compiles and runs
B) Fails at runtime
C) Compilation fails

10) Given
abstract class X {
  public abstract void doStuff();
}

class Y extends X {}
X x = new Y();

What is the result:
A) All good
B) construction of Y fails
C) Declaration of Y fails
D) Assignment to X x fails

10) Given
interface X {
  /* public abstract */ void doStuff();
}

class Y implements X {}
X x = new Y();

What is the result:
A) All good
B) construction of Y fails
C) Declaration of Y fails
D) Assignment to X x fails

11) Given
interface X {
  void doStuff();
}

abstract class Y implements X {}
X x = new Y();

What is the result:
A) All good
B) construction of Y fails
C) Declaration of Y fails
D) Assignment to X x fails

12) 
  class Q26Base {
    int x = 99;
    Q26Base(int x){ System.out.println("in base constructor x is " + x); }
  }
  class Q26Sub extends Q26Base {
    Q26Sub(int x) {
      //super();// implicit call fails! no Q26Base() no arg constructor...
      System.out.println("in sub constructor, x is " + x);
    }
  }
    
given a call to:
    new Q26Sub(4)

    What is the result?
    A) in base constructor x is 4
       in sub constructor, x is 4
    B) in base constructor x is 99
       in sub constructor, x is 4
    C) Compilation fails
    D) An exception is thrown

13) Given
public class X {
  public X(int x) {}
}

and
X x = new X();
What is the result?
A) success
B) Runtime error
C) Compile fails

14) given:

public void q11A(int x) {
    x = x + 1;
}

int x = 99;
q11A(x);
System.out.println(x);

What is the result?
    A) 99
    B) 100
    C) An error

15) public void q12A(StringBuilder x) {
    x.append(" world");
  }

and:
    StringBuilder x = new StringBuilder("Hello");
    q12A(x);
    System.out.println(x);
    
What is the result?
    A) Hello
    B) Hello world
    C)  world
    D) An error

16)
Which compile?
A)
s -> s.getGrade() > 3; // NO CONTEXT
interface Blah {
  boolean wiffle(Student s);
}
(Student s) -> s.getGrade() > 3;

B)
Predicate<String> ps = s -> s.length();
                       ^ Student yay!
                      ^ method is test, of Predicate<String>
                            ----------  ---> { return s.length(); }
                                                        ^ int
                     test method must return *boolean*

C)
public Predicate<String> getPred() {
  return s -> {
    System.out.println("testing " + s);
//    return s.length() > 3 // missing semicolon
    return s.length() > 3;
  };
}

D)
Predicate<String> ps = (String s, String t) -> s.length() > t.length(); // BAD
BiPredicate<String, String> ps = (String s, String t) -> s.length() > t.length(); // GOOD

E)
public void useTest(Predicate<String> ps) {}
...
useTest(s -> s.length() > 3;); //  EXCESS semicolon
                           ^ BAD!!

17) Given:
    StringBuilder sb1 = new StringBuilder("Hello");
    StringBuilder sb2 = sb1;
    sb1 = null;

Which is true?
    A) sb1 is unreferenced and eligible for GC
    B) sb1 and sb2 are unreferenced and eligible for GC
    C) No objects are eligible for GC

18) Given
    StringBuilder sb1 = new StringBuilder("Hello");
    StringBuilder sb2 = new StringBuilder("World");
    sb1 = null;
    sb2 = sb1;

Which is true?
    A) Object containing "Hello" is unreferenced and eligible for GC
    B) Object containing "World" is unreferenced and eligible for GC
    C) Object containing "Hello", and "World" are both unreferenced and eligible for GC
    D) No objects are eligible for GC
